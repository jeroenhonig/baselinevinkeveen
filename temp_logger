// PRODUCTIE TEMPERATUURLOGGER - 24 UUR INTERVAL
// Geen debug, geen buffer, ultra power saving

#include <OneWire.h>
#include <DallasTemperature.h>
#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include <RTClib.h>
#include <LowPower.h>
#include <avr/power.h>
#include <avr/wdt.h>

// Pin definities
#define ONE_WIRE_BUS 2
#define SD_CS_PIN 4

// Sensor setup
OneWire ow(ONE_WIRE_BUS);
DallasTemperature temp(&ow);
RTC_DS1307 rtc;

// Status tracking
byte status = 0;
#define RTC_OK    0
#define TEMP_OK   1  
#define SD_OK     2

unsigned int measurementCount = 0;

void setup() {
  // Disable watchdog timer
  wdt_disable();
  
  // Disable ALL unused peripherals for maximum power saving
  power_adc_disable();
  power_spi_disable();  // Re-enable when needed
  power_timer1_disable();
  power_timer2_disable();
  power_usart0_disable();  // Disable Serial completely
  
  // Initialize components
  initializeComponents();
  
  // Brief delay then start first measurement
  delay(1000);
  
  // Take first measurement
  takeMeasurement();
  
  // Enter main sleep loop
  enter24HourSleep();
}

void loop() {
  // Take measurement
  takeMeasurement();
  
  // Sleep for 24 hours
  enter24HourSleep();
}

void initializeComponents() {
  // RTC initialization
  Wire.begin();
  if (rtc.begin()) {
    bitSet(status, RTC_OK);
    
    // Set time if needed (only on first run)
    if (!rtc.isrunning()) {
      // Set to current date/time (modify as needed)
      rtc.adjust(DateTime(2025, 5, 12, 17, 0, 0));  // 12 mei 2025, 17:00
    }
  }
  
  // Temperature sensor initialization
  temp.begin();
  temp.setResolution(8);  // 8-bit = 0.5Â°C accuracy, fastest conversion
  
  // Test temperature
  temp.requestTemperatures();
  delay(200);
  float testTemp = temp.getTempCByIndex(0);
  if (testTemp > -100) {
    bitSet(status, TEMP_OK);
  }
  
  // SD card initialization
  power_spi_enable();
  if (SD.begin(SD_CS_PIN)) {
    bitSet(status, SD_OK);
    
    // Create/check log file
    File f = SD.open(F("temp24.csv"), FILE_WRITE);
    if (f) {
      if (f.size() == 0) {
        f.println(F("# 24-Hour Temperature Logger"));
        f.println(F("# Date,Time,Timestamp,Temperature"));
      }
      f.close();
    }
  }
  power_spi_disable();
}

void takeMeasurement() {
  measurementCount++;
  
  // Get timestamp
  unsigned long unixTime = 0;
  DateTime now;
  if (bitRead(status, RTC_OK)) {
    now = rtc.now();
    unixTime = now.unixtime();
  }
  
  // Read temperature
  float temperature = -999;
  if (bitRead(status, TEMP_OK)) {
    temp.requestTemperatures();
    delay(200);  // Wait for 8-bit conversion
    temperature = temp.getTempCByIndex(0);
  }
  
  // Write directly to SD (no buffering)
  if (bitRead(status, SD_OK) && temperature > -100) {
    power_spi_enable();
    File f = SD.open(F("temp24.csv"), FILE_WRITE);
    
    if (f) {
      // Write human-readable date/time and unix timestamp
      if (bitRead(status, RTC_OK)) {
        // Format: 2025-05-12,17:30:00,timestamp,temperature
        f.print(now.year());
        f.print(F("-"));
        if (now.month() < 10) f.print(F("0"));
        f.print(now.month());
        f.print(F("-"));
        if (now.day() < 10) f.print(F("0"));
        f.print(now.day());
        f.print(F(","));
        
        if (now.hour() < 10) f.print(F("0"));
        f.print(now.hour());
        f.print(F(":"));
        if (now.minute() < 10) f.print(F("0"));
        f.print(now.minute());
        f.print(F(":"));
        if (now.second() < 10) f.print(F("0"));
        f.print(now.second());
        f.print(F(","));
        
        f.print(unixTime);
      } else {
        f.print(F("NO_RTC,NO_TIME,0"));
      }
      
      f.print(F(","));
      f.println(temperature, 1);
      f.close();
    }
    
    power_spi_disable();
  }
  
  // Optional: Brief LED flash to indicate measurement taken
  // pinMode(LED_BUILTIN, OUTPUT);
  // digitalWrite(LED_BUILTIN, HIGH);
  // delay(100);
  // digitalWrite(LED_BUILTIN, LOW);
}

void enter24HourSleep() {
  // 24 hours = 24 * 60 * 60 = 86400 seconds
  // 86400 / 8 = 10800 sleep cycles
  
  for (unsigned int i = 0; i < 10800; i++) {
    // Enter deepest power-down mode
    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
    
    // Check for early wake-up (optional)
    // if (digitalRead(SOME_WAKE_PIN) == LOW) break;
  }
}

// Power failure detection (optional)
void setupPowerFailureDetection() {
  // Monitor power supply and take emergency measurement
  // Set up interrupt on power-down signal
  // Not implemented - requires additional circuitry
}

// Calibration function (optional)
void calibrateTemperatureSensor() {
  // Store calibration offset in EEPROM if needed
  // temp.setOffset(calibrationValue);
}

// Low battery warning (optional - requires voltage divider)
bool checkBatteryVoltage() {
  // Read battery voltage via analog pin
  // Return true if voltage too low
  return false;  // Not implemented
}
